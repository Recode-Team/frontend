[{"D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\index.js":"1","D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\App.js":"2","D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\layouts\\Layout.js":"3","D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\layouts\\Header.js":"4","D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\layouts\\Footer.js":"5","D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\modals\\Login.js":"6","D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\modals\\SignUp.js":"7"},{"size":273,"mtime":1680153245426,"results":"8","hashOfConfig":"9"},{"size":243,"mtime":1680153245426,"results":"10","hashOfConfig":"9"},{"size":250,"mtime":1680153245434,"results":"11","hashOfConfig":"9"},{"size":1301,"mtime":1680153245434,"results":"12","hashOfConfig":"9"},{"size":345,"mtime":1680153245426,"results":"13","hashOfConfig":"9"},{"size":2234,"mtime":1680591797896,"results":"14","hashOfConfig":"9"},{"size":4901,"mtime":1680590777550,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fy0yr1",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\index.js",[],[],"D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\App.js",[],[],"D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\layouts\\Layout.js",[],[],"D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\layouts\\Header.js",[],[],"D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\layouts\\Footer.js",[],[],"D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\modals\\Login.js",["38"],[],"D:\\Users\\user\\Documents\\GitHub\\Recode-Team\\Frontend\\src\\modals\\SignUp.js",["39","40","41","42"],[],"import React, { useState } from 'react';\r\nimport { Modal, Button, Form, Container } from 'react-bootstrap';\r\n\r\nexport const SignUp = ({ show, onHide }) => {\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n\r\n  const [emailMsg, setEmailMsg] = useState(\"\");\r\n  const [nameMsg, setNameMsg] = useState(\"\");\r\n  const [passwordMsg, setPasswordMsg] = useState(\"\");\r\n  const [passwordConfirmMsg, setPasswordConfirmMsg] = useState(\"\");\r\n\r\n  const [isEmail, setIsEmail] = useState(false);\r\n  const [isName, setIsName] = useState(false);\r\n  const [isPassword, setIsPassword] = useState(false);\r\n  const [isPasswordConfirm, setIsPasswordConfirm] = useState(false);\r\n\r\n  const onEmailHandler = (e) => {\r\n    const inputEmail = e.target.value;\r\n    setEmail(inputEmail);\r\n    const emailRegEx = /^[A-Za-z0-9]([-_.]?[A-Za-z0-9])*@[A-Za-z0-9]([-_.]?[A-Za-z0-9])*\\.[A-Za-z]{2,3}$/i;\r\n\r\n    if (!emailRegEx.test(inputEmail)) {\r\n      setEmailMsg(\"이메일의 형식이 올바르지 않습니다.\");\r\n      setIsEmail(false);\r\n    } else{\r\n      setEmailMsg(\"올바른 이메일 형식입니다.\");\r\n      setIsEmail(true);\r\n    }\r\n  }\r\n  const onNameHandler = (e) => {\r\n    const inputName = e.target.value;\r\n    setName(inputName);\r\n\r\n    if (inputName.length < 2 || inputName.length > 5) {\r\n      setNameMsg(\"2글자 이상 5글자 이하로 입력하세요.\");\r\n      setIsName(false);\r\n    } else {\r\n      setNameMsg(\"사용 가능한 닉네임입니다.\");\r\n      setIsName(true);\r\n    }\r\n  }\r\n  const onPasswordHandler = (e) => {\r\n    const inputPassword = e.target.value;\r\n    setPassword(inputPassword);\r\n    const passwordRegEx = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/;\r\n    \r\n    if (!passwordRegEx.test(inputPassword)) {\r\n      setPasswordMsg(\"숫자, 영문자, 특수문자를 조합하여 8자리 이상 입력하세요.\")\r\n      setIsPassword(false);\r\n    } else {\r\n      setPasswordMsg(\"안전한 비밀번호입니다.\");\r\n      setIsPassword(true);\r\n    }\r\n  }\r\n  const onPasswordConfirm = (e) => {\r\n    const inputPasswordConfirm = e.target.value;\r\n    setPasswordConfirm(inputPasswordConfirm);\r\n    \r\n    if (password !== inputPasswordConfirm) {\r\n      setPasswordConfirmMsg(\"비밀번호가 일치하지 않습니다.\");\r\n      setIsPasswordConfirm(false);\r\n    } else {\r\n      setPasswordConfirmMsg(\"비밀번호가 일치합니다.\");\r\n      setIsPasswordConfirm(true);\r\n    }\r\n  }\r\n  const onSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log('email:', email)\r\n    console.log('name:', name)\r\n    console.log('password:', password)\r\n\r\n    fetch('http://localhost:27000/', {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        name: name,\r\n        password: password\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((result) => console.log(\"결과: \", result))\r\n      .catch(error => console.error(error));\r\n}\r\n\r\n  return (\r\n    <Modal\r\n      show = {show}\r\n      onHide = {onHide}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n    <Container>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          회원가입\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form>\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label></Form.Label>\r\n            <Form.Control type=\"email\" placeholder=\"이메일\" value={email} onChange={onEmailHandler}/>\r\n            <p align=\"right\">{emailMsg}</p>\r\n          </Form.Group>\r\n\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label></Form.Label>\r\n            <Form.Control placeholder=\"닉네임\" value={name} onChange={onNameHandler}/>\r\n            <p align=\"right\">{nameMsg}</p>\r\n          </Form.Group>\r\n          \r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label></Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"비밀번호\" value={password} onChange={onPasswordHandler}/>\r\n            <p align=\"right\">{passwordMsg}</p>\r\n          </Form.Group>\r\n\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label></Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"비밀번호 확인\" value={passwordConfirm} onChange={onPasswordConfirm} />\r\n            <p align=\"right\">{passwordConfirmMsg}</p>\r\n          </Form.Group>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"primary\" type=\"button\" onClick={onSubmitHandler}>\r\n          완료\r\n        </Button>\r\n        <Button onClick={onHide}>취소</Button>\r\n      </Modal.Footer>\r\n    </Container>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default SignUp",{"ruleId":"43","severity":1,"message":"44","line":21,"column":9,"nodeType":"45","messageId":"46","endLine":21,"endColumn":20},{"ruleId":"43","severity":1,"message":"47","line":16,"column":10,"nodeType":"45","messageId":"46","endLine":16,"endColumn":17},{"ruleId":"43","severity":1,"message":"48","line":17,"column":10,"nodeType":"45","messageId":"46","endLine":17,"endColumn":16},{"ruleId":"43","severity":1,"message":"49","line":18,"column":10,"nodeType":"45","messageId":"46","endLine":18,"endColumn":20},{"ruleId":"43","severity":1,"message":"50","line":19,"column":10,"nodeType":"45","messageId":"46","endLine":19,"endColumn":27},"no-unused-vars","'dataHandler' is assigned a value but never used.","Identifier","unusedVar","'isEmail' is assigned a value but never used.","'isName' is assigned a value but never used.","'isPassword' is assigned a value but never used.","'isPasswordConfirm' is assigned a value but never used."]